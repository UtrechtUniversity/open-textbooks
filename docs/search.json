[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Open textbooks with Quarto on GitHub Pages",
    "section": "",
    "text": "Welcome!\nIn this open textbook, we highlight some tips and tricks to set up and maintain an open textbook that is:\n\ncreated with Quarto in Rstudio,\ntracked by git, and\npublished on GitHub Pages\n\nThis book is explicitly not meant to be complete. We include how to get started, and collect useful ways to customize a Quarto book to your liking.\nContributions are welcome!",
    "crumbs": [
      "Welcome!"
    ]
  },
  {
    "objectID": "prerequisites.html",
    "href": "prerequisites.html",
    "title": "1  Installation",
    "section": "",
    "text": "1.1 R and Rstudio",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "prerequisites.html#r-and-rstudio",
    "href": "prerequisites.html#r-and-rstudio",
    "title": "1  Installation",
    "section": "",
    "text": "Important\n\n\n\nIf you already have an R and/or Rstudio installation, make sure they are updated. The RStudio installation should have at least v2023. You can check this via Help &gt; About RStudio.\n\n\n\nUtrecht University laptopPersonal laptop\n\n\n\nOpen Software Center\nInstall R for Windows Suite\n\nInstalling R packages on a Utrecht University laptop can be hard. This is because R packages are installed on a so-called ‘mounted’ drive. This causes problems with the performance. Check the installation as follows:\n\nOpen RStudio\nWrite the following line of code in your console: .libPaths(), and press enter to execute.\nIf the response starts with // or \\\\, you are installing on a mounted drive. This can cause various errors, and even if everything goes right, installing tidyverse takes ages.\n\nSolution 1: see the solution on the intranet.\nSolution 2:\n\n\nCreate a folder R-packages on a local drive.\nCopy the location to that drive. For example: C:/Users/User/R-packages.\nRun the following line of code: file.edit(file.path(\"~\", \".Rprofile\"))\nPaste .libPaths(\"C:/Users/User/R-packages\") in the editor and save the file.\nRestart your R session\nClick on Packages&gt;Install. Is Install to library pointing to C:/Users/User/R-packages?\nIf not: check if the path is correctly spelled. Try inverting the slashes (\\ instead of /). You may need to use double slashes (\\\\ or //).\nTick ‘source on save’, click save, and check Packages&gt;Install again.\n\n\n\n\nI.e. a laptop with administrator rights.\n\nDownload and install R from https://cran.rstudio.com/\nDownload and install Rstudio from https://posit.co/download/rstudio-desktop/#download",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "prerequisites.html#quarto",
    "href": "prerequisites.html#quarto",
    "title": "1  Installation",
    "section": "1.2 Quarto",
    "text": "1.2 Quarto\n\nDownload Quarto from the Quarto website. The website will automatically select the correct installation file based on your operating system.\nDouble click on the installation file to install it on your PC.\nCheck that Quarto is installed:\n\nRestart RStudio.\nIn RStudio, go to the Terminal (next to the Console), type quarto --version and press Enter. A version number should appear.\nAlternatively, go to File &gt; New project &gt; New directory and check whether the Quarto outputs are presented as options (Quarto project, Quarto website, Quarto blog, Quarto book)",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "prerequisites.html#github-account",
    "href": "prerequisites.html#github-account",
    "title": "1  Installation",
    "section": "1.3 GitHub account",
    "text": "1.3 GitHub account\nIf you do not have a GitHub account, make one! Follow the steps here.\n\n\n\n\n\n\nTip\n\n\n\nPreferably do not use your work e-mail address. Why? Because then you won’t be able to use your GitHub account anymore in case you leave your current job!",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "prerequisites.html#git",
    "href": "prerequisites.html#git",
    "title": "1  Installation",
    "section": "1.4 git",
    "text": "1.4 git\nInstalling git correctly may take a bit more time. This is because we need to:\n\nInstall git at a good location, and\nLink the local git installation to your GitHub account\n\nEspecially the latter part is sometimes difficult, but it will pay off! If the installation went correctly, you will be able to “download” information from, or “upload” information to, GitHub to your local PC without having to open a web browser!\nPlease follow all the steps laid out on this page.",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "get-started.html",
    "href": "get-started.html",
    "title": "2  Getting started with a Quarto book",
    "section": "",
    "text": "2.1 Create a Quarto book\nFollow the Quickstart intstructions for Rstudio from the Quarto documentation to create an empty Quarto book.",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started with a Quarto book</span>"
    ]
  },
  {
    "objectID": "get-started.html#check-the-basic-settings",
    "href": "get-started.html#check-the-basic-settings",
    "title": "2  Getting started with a Quarto book",
    "section": "2.2 Check the basic settings",
    "text": "2.2 Check the basic settings\nOpen the _quarto.yml file. Make sure it at least contains something like this:\nproject:\n  type: book\n  output-dir: docs              # When rendering, the html files will be \n                                # placed in the docs folder. The folder needs\n                                # to be named docs in order for GitHub pages to work!\n\nbook:\n  title: \"YOUR BOOK TITLE\"\n  author: \"YOUR NAME\"           # Book authors: add a new row for each new author\n  date: \"YYYY/MM/DD\"            # Date of the book, you can also use \n                                # last-modified, or today (without quotes)\n  chapters:                     # Table of contents\n  - index.qmd                   # Home page, should always be index.qmd\n  - YOUR-CHAPTER-1.qmd          # Each chapter has its own .qmd file\n  - part: \"Title of this part\"  # You can also introduce sections with subsections with \"part\"\n    chapters: \n      - YOUR-CHAPTER-2.qmd\n      - YOUR-CHAPTER-3.qmd\n  - YOUR-CHAPTER-4.qmd\n\nbibliography: references.bib  # If you want to use a reference manager, we'll come back to this later\n\nformat:                       # For open textbooks on the web, we only need html\n  html:                       # It's also possible to add pdf, epub and docx if you want\n    theme: cosmo              # Default styling, there are many others!\nSee the quarto-settings chapter for more customization options.",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started with a Quarto book</span>"
    ]
  },
  {
    "objectID": "get-started.html#make-your-project-a-git-repository",
    "href": "get-started.html#make-your-project-a-git-repository",
    "title": "2  Getting started with a Quarto book",
    "section": "2.3 Make your project a git repository",
    "text": "2.3 Make your project a git repository\n\nIn RStudio, go to the Terminal (next to Console) and type git init. This will turn your project folder into a git repository.\nIn the terminal, type git status. This will give you all uncommited changes you’ve made. To commit all these changes at once, type:\n\ngit add -A .\ngit commit -m \"Initialize github textbook\"\n\nIn GitHub, create a new, empty repository \n\nFor owner: choose where you want to create the repository (e.g., under your name or possibly under a GitHub organization).\nFor Repository Name, it’s best to use the same name as you named your local Quarto book folder.\nLeave all other options empty for now.\nClick Create repository\n\nA new empty repository will now be created on GitHub. Now we want to connect this GitHub repository with the repository that you have already made on your local PC. To do so, copy the code that GitHub conveniently already gives you under or push an existing repository from the command line. For me this looks like this:  Copy this code in the Terminal in Rstudio, and run it.\nPractice the git workflow of adding content, comitting the changes, and pushing the changes to GitHub. The basic steps are laid out in the Working with git chapter.",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started with a Quarto book</span>"
    ]
  },
  {
    "objectID": "get-started.html#host-on-github-pages",
    "href": "get-started.html#host-on-github-pages",
    "title": "2  Getting started with a Quarto book",
    "section": "2.4 Host on GitHub pages",
    "text": "2.4 Host on GitHub pages\nNow that you’ve pushed your basic book to GitHub, you need to tell GitHub to host the html files online.\n\nNavigate to your repository on GitHub (https://github.com/yourusername/yourrepositoryname).\nGo to the repository’s Settings \nUnder “Code and automation” in the menu on the left, click “Pages”.\nUnder ” Build and deployment”, select:\n\nSource: Deploy from a branch\nBranch: main\nSelect folder: /docs\n\nWait a few minutes while your website is being built.\nAfter a while, GitHub will tell you “Your site is live at yourusername.github.io/yourrepositoryname”!",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Getting started with a Quarto book</span>"
    ]
  },
  {
    "objectID": "markdown.html",
    "href": "markdown.html",
    "title": "3  Using markdown",
    "section": "",
    "text": "3.1 Basic syntax",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Using markdown</span>"
    ]
  },
  {
    "objectID": "markdown.html#basic-syntax",
    "href": "markdown.html#basic-syntax",
    "title": "3  Using markdown",
    "section": "Header 2",
    "text": "Markdown Syntax\nOutput\n\n\n\n\n*italics* and **bold**\nitalics and bold\n\n\nsuperscript^2^ / subscript~2~\nsuperscript2 / subscript2\n\n\n~~strikethrough~~\nstrikethrough\n\n\n`verbatim code`\nverbatim code\n\n\n# Header 1\nHeader 1\n\n\n## Header 2\nHeader 2\n\n\n### Header 3\nHeader 3",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Using markdown</span>"
    ]
  },
  {
    "objectID": "markdown.html#lists",
    "href": "markdown.html#lists",
    "title": "3  Using markdown",
    "section": "3.2 Lists",
    "text": "3.2 Lists\n\n\n* unordered list\n  + sub-item 1\n    - sub-sub-item 1\n  + sub-item 2\n\n\n\nunordered list\n\nsub-item 1\n\nsub-sub-item 1\n\nsub-item 2\n\n\n\n\n\n\n1. ordered list\n2. item 2\n   i. sub-item 1\n      A.  sub-sub-item 1\n\n\n\nordered list\nitem 2\n\nsub-item 1\n\nsub-sub-item 1\n\n\n\n\n\n\n\n*   item 2\n    \n    Continued (indent 4 spaces)\n\n\n\nitem 2\nContinued (indent 4 spaces)\n\n\n\n\n\nterm\n: definition\n\n\n\nterm\n\ndefinition",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Using markdown</span>"
    ]
  },
  {
    "objectID": "markdown.html#links",
    "href": "markdown.html#links",
    "title": "3  Using markdown",
    "section": "3.3 Links",
    "text": "3.3 Links\n\n\n[named hyperlink](https://quarto.org/)\n\n named hyperlink\n\n\n\n\nDirect url: &lt;https://quarto.org/&gt;\n\n Direct url: https://quarto.org/\n\n\n\n\nLink to [other places](#lists) \nin the document.\n\n Link to other places in the document.\n\n\n\n\nEmbed an image: \n![penguins](https://allisonhorst.github.io/palmerpenguins/reference/figures/lter_penguins.png)\n\n Embed an image:",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Using markdown</span>"
    ]
  },
  {
    "objectID": "markdown.html#tables",
    "href": "markdown.html#tables",
    "title": "3  Using markdown",
    "section": "3.4 Tables",
    "text": "3.4 Tables\n\n\n    | Right | Left | Default | Center |\n    |------:|:-----|---------|:------:|\n    |   12  |  12  |    12   |    12  |\n    |  123  |  123 |   123   |   123  |\n    |    1  |    1 |     1   |     1  |\n\n\n\n\nRight\nLeft\nDefault\nCenter\n\n\n\n\n12\n12\n12\n12\n\n\n123\n123\n123\n123\n\n\n1\n1\n1\n1\n\n\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nIt is possible to use raw html elements in a quarto document. But try to limit this because:\n\nNot everyone knows how html works, so it’s less accessible for others to work with your content.\nRaw html elements will only correctly be displayed in html output. If you have pdf output, for example, the html elements are not rendered correctly.",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Using markdown</span>"
    ]
  },
  {
    "objectID": "git.html",
    "href": "git.html",
    "title": "4  Working with git and GitHub",
    "section": "",
    "text": "4.1 What are git & github?\nWhile originally used to collaborate and track versions of code, you can use git and GitHub for other types of files as well, such as documentation.",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with git and GitHub</span>"
    ]
  },
  {
    "objectID": "git.html#what-are-git-github",
    "href": "git.html#what-are-git-github",
    "title": "4  Working with git and GitHub",
    "section": "",
    "text": "Git is open source software that can track whether (and sometimes which) changes are made to files, by whom, and when. You can save new versions of files without having to create copies of that file. This allows you to revert to a previous of these files.\nGitHub is a website where files that are version-controlled by git can be hosted, and where you can collaborate with other GitHub users. There are also some integrations with other apps.",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with git and GitHub</span>"
    ]
  },
  {
    "objectID": "git.html#terminology",
    "href": "git.html#terminology",
    "title": "4  Working with git and GitHub",
    "section": "4.2 Terminology",
    "text": "4.2 Terminology\nGit and GitHub come with a lot of confusing terminology. Here is a simplified and by no means complete and objective list of terms:\n\nGit termsGitHub terms\n\n\n\ngit repo / git repository\n\na folder with files (and potentially subfolders) that are tracked by git\n\nstaging\n\ntelling git that you want to create a new version of the changes\n\ncommit\n\nsnapshot of the files in the repo. The snapshot gets a self-typed message (commit message), and a hash that can be used to revert the repo to the previous state\n\nclone\n\ncreate a copy of a git repo on your local device\n\nremote\n\nan online version of the git repo (for example on GitHub)\n\npush\n\nupload all commits to the remote\n\npull\n\ndownload all updates done in the remote to your local device\n\nbranch\n\na copy of the git repo\n\ncheckout\n\nswitch to another branch\n\n\n\n\n\nfork\n\na copy of a GitHub repository from someone else to your own account\n\npull request\n\na request to merge your changes in an existing GitHub repository\n\nissues\n\nposts from GitHub users that highlight things that need to be fixed or done in the GitHub repository\n\nGitHub discussion\n\na place to discuss with fellow GitHub users about the content of a GitHub repository",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with git and GitHub</span>"
    ]
  },
  {
    "objectID": "git.html#the-git-workflow",
    "href": "git.html#the-git-workflow",
    "title": "4  Working with git and GitHub",
    "section": "4.3 The git workflow",
    "text": "4.3 The git workflow\nWhen working on a git project, you will always perform the following steps:\n\n\n\n\n\nflowchart LR\n   a[make change] --&gt; b[git add] --&gt; c[git commit] --&gt; d[git push]\n\n\n\n\n\n\nThe workflow can be compared with wrapping and sending a package:\n\nMake change: Collect the stuff you want to send: Make an edit in a file and save the edit as normal (CNTR + S).\nStage change: Put the stuff in a box: select which files you want to make a snapshot of.\nCommit the change: Put a label on the box: make a snapshot of the changes made so far. A commit (snapshot) is always accompanied by a commit message explaining what changes were made.\nPush the changes to GitHub: Send the package: upload the commit(s) done locally to GitHub.\n\nEvery time you make an edit that you may want to go back to, you will have to go through this workflow.",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with git and GitHub</span>"
    ]
  },
  {
    "objectID": "git.html#where-should-i-use-git-commands",
    "href": "git.html#where-should-i-use-git-commands",
    "title": "4  Working with git and GitHub",
    "section": "4.4 Where should I use git commands?",
    "text": "4.4 Where should I use git commands?\nThere are many programs that you can use to work with git:\n\nUser interfaces: here is an overview of programs that use user interfaces. RStudio is one of these!\nCommand-line tools: use any Terminal you want, for example:\n\ngit bash (comes with the git installation)\nCommand prompt in Windows\nterminal in RStudio or Jupyter Lab\n… etc.\n\n\n\n\n\n\n\n\nNote\n\n\n\nOn this page we only list a selection of git commands, which should be used in a command-line tool. This is because every user interface is a little bit different, whereas the command-line commands are all the same.",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with git and GitHub</span>"
    ]
  },
  {
    "objectID": "git.html#staging-and-committing",
    "href": "git.html#staging-and-committing",
    "title": "4  Working with git and GitHub",
    "section": "4.5 Staging and committing",
    "text": "4.5 Staging and committing\nAfter you’ve made a change to one or more file and saved them, you should tell git to make a snapshot of one or more of those files. First, you stage the files you want to create a snapshot of (git add) and then you create the snapshot (git commit -m \"Your commit message\").\n\nChecking:\n\nList the files that have been changed, but not committed: git status\nCheck which edits where made in a (textual) file: git diff filename\n\nStaging:\n\nStage a file (tip: use the tab to use autocompletion): git add filename\nStage multiple files: git add filename1 filename2 filename3\nStage all files in the workspace: git add .\n\nCommitting:\n\nCommit the change(s) you staged: git commit -m \"Change x and y to z\"\nCommit all (staged and unstaged) change(s) made in the workspace: git commit -a -m \"Change x and y and z\"",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with git and GitHub</span>"
    ]
  },
  {
    "objectID": "git.html#pushing-to-and-pulling-from-github",
    "href": "git.html#pushing-to-and-pulling-from-github",
    "title": "4  Working with git and GitHub",
    "section": "4.6 Pushing to and pulling from GitHub",
    "text": "4.6 Pushing to and pulling from GitHub\nIf you work on a GitHub repository by yourself, you can freely upload all changes that you made on your local device to GitHub (git push). However, it often happens that the online version of the repository has some changes (commits) that you do not have locally. For example because you made an edit directly on GitHub, or a collaborator has pushed commits (uploaded changes) to the same repository. When you make similar edits and then want to push those to GitHub, there will be a merge conflict and you will first have to resolve that before you can work any further.\n\n\n\n\n\n\nTip\n\n\n\nBefore you start making edits in a git repository on your local device, you should update it with the online changes:\ngit pull\n\n\n\n\n\n\n\n\nRemotes\n\n\n\n\n\nGit knows two types of online versions (remotes) of a repository: origin and upstream. You can read about the difference between origin and upstream remotes in this Stackoverflow answer. When pushing to or pulling from GitHub, it is possible to specify from/to which remote and branch you want to push or pull:\ngit push origin branch-name\nor\ngit pull upstream branch-name",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with git and GitHub</span>"
    ]
  },
  {
    "objectID": "git.html#branches",
    "href": "git.html#branches",
    "title": "4  Working with git and GitHub",
    "section": "4.7 Branches",
    "text": "4.7 Branches\nA git repository can exist in multiple “versions” which are called branches. There is always a “main” or “master” branch, which you should consider the clean branch. Besides that, you can create other branches that are meant to make your own changes, or try something different without dirtying the clean (main) version. After you have made changes in your own branch and you think they should be incorporated in the main branch, you can then merge your branch with the main branch.\n\n4.7.0.1 Some branch-related commands\n\nCheck which branch you are working on now (and list which branches there are): git branch -v\nSwitch to another branch: git checkout branchname\nCreate a new branch: git checkout -b newbranchname\nDelete a branch: git branch -d branchname",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with git and GitHub</span>"
    ]
  },
  {
    "objectID": "git.html#workflow-on-github",
    "href": "git.html#workflow-on-github",
    "title": "4  Working with git and GitHub",
    "section": "4.8 Workflow on github",
    "text": "4.8 Workflow on github\nOn Github, the workflow is a bit more extensive, because often you are collaborating and do not want others to just start editing the main branch right away. There are multiple methods to collaborate on a project, but we recommend the following, assuming that there is already a repository for the project and you want to contribute:\n\nOn the repository page on Github, fork the repository: this creates a copy of the repository on your own Github account that you have full access to.\nIn your forked (copied) Github repository, create a new branch for the changes you are about to make with a short but comprehensible name, e.g., “new-chapter”.\nIf you want to edit files locally, clone your repository to your local PC. This will create a copy of the repository in your file explorer (the contents of which can change according to which branch you are on!)\ngit clone git@github.com:username/repositoryname.git\nEdit the files you want to edit and commit the changes (making a snapshot; include a comprehensible commit message!)\nYou have now committed changes locally, but they are not yet visible in your remote repository, i.e., the online github repository on your account. In order to get the commits you made locally to be visible online, you need to push them to your remote repository on Github.\ngit push\nNow the changes are visible in your own account, but not in the original repository. In order to get your changes into the main repository, you need to do a pull request on Github. This is a request to the owners of the original repository to merge your branch with (one of) theirs. Once merged by the owners, you are often prompted to remove your own branch (which is not necessary if you are planning to make more changes later).",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with git and GitHub</span>"
    ]
  },
  {
    "objectID": "git.html#resources",
    "href": "git.html#resources",
    "title": "4  Working with git and GitHub",
    "section": "4.9 Resources",
    "text": "4.9 Resources\n\nComprehensive git guide by The Turing Way\nMore info on the Git workflow\nGithub guide: git handbook (duration ca. 1 hour)\nUsing Git(hub) with Rstudio: https://happygitwithr.com/",
    "crumbs": [
      "Basic set-up",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Working with git and GitHub</span>"
    ]
  },
  {
    "objectID": "quarto-settings.html",
    "href": "quarto-settings.html",
    "title": "5  Quarto settings",
    "section": "",
    "text": "5.1 Basic settings\nOpen the _quarto.yml file. Make sure it at least contains something like this:",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Quarto settings</span>"
    ]
  },
  {
    "objectID": "quarto-settings.html#basic-settings",
    "href": "quarto-settings.html#basic-settings",
    "title": "5  Quarto settings",
    "section": "",
    "text": "Caution\n\n\n\nThis yaml is not complete nor validated. WIP!\n\n\nproject:\n  type: book\n  output-dir: ../docs           # When rendering, the html files will be \n                                # placed in the docs folder. The folder needs\n                                # to be named docs in order for GitHub pages to work!\n\nbook:                           # Some general information about your book\n  title: \"[YOUR BOOK'S TITLE]\"\n  authors:                      # Book authors: add a new row for each new author\n  - \"NAME AUTHOR 1\"\n  - \"NAME AUTHOR 2\"\n  \n  date: \"YYYY/MM/DD\"            # Date of the book, you can also use \n                                # last-modified, or today (without quotes)\n  \n  chapters:                     # Table of contents\n    - index.qmd                 # This is your landing page / homepage\n    - YOUR-CHAPTER-1.qmd        # Make sure each chapter has its own .qmd file\n    - part: NAME-PART           # Use part: if you want to add subchapters\n      chapters:\n        - YOUR-CHAPTER2.qmd\n        - YOUR-CHAPTER3.qmd\n    - YOUR-CHAPTER-4.qmd\n    # etc.\n    \n    repo-url: https://github.com/YOUR-ORGANIZATION/YOUR-REPO-NAME\n    repo-actions: [edit]            # TODO\n    \n    sidebar:                                    # TODO\n        logo: path/to/your/logo.png\n\nbibliography: references.bib    # If you use a reference manager, you can export\n                                # a .bib file and include automatically formatted \n                                # references. Include the path to the .bib file here.\nbibliostyle: apalike            # Citation style of bibliography\nnocite: |                       # This means: even if you don't actively use all \n  @*                            # references in your book text, all entries in the \n                                # .bib file will be included in the bibliography.\n\nformat:\n  html:\n    theme: cosmo\n  pdf:\n    documentclass: scrreport\n  epub:\n    cover-image: cover.png\n\ncallout-appearance: simple",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Quarto settings</span>"
    ]
  },
  {
    "objectID": "multimedia.html",
    "href": "multimedia.html",
    "title": "6  Adding multimedia",
    "section": "",
    "text": "6.1 Image\nThe basic markdown syntax for adding an image is as follows:\nThe image can be located locally (in that case the link is the full path to the image file), or online (in that case the link is a URL to that picture).\nFor image positioning, styling, and more options, please check out Quarto’s documentation about figures.",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Adding multimedia</span>"
    ]
  },
  {
    "objectID": "multimedia.html#image",
    "href": "multimedia.html#image",
    "title": "6  Adding multimedia",
    "section": "",
    "text": "![Image title](link/to/the/image.png)",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Adding multimedia</span>"
    ]
  },
  {
    "objectID": "multimedia.html#video",
    "href": "multimedia.html#video",
    "title": "6  Adding multimedia",
    "section": "6.2 Video",
    "text": "6.2 Video\nIn Quarto, the basic syntax for embedding a video is as follows:\n{{&lt; video link/to/video &gt;}}\nThe video can be located locally (in that case the link is the full path to the video file), or online (in that case the link is a URL to the video).\nFor video options such as height, width, start time, etc. please check out Quarto’s documentation about videos.",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Adding multimedia</span>"
    ]
  },
  {
    "objectID": "multimedia.html#diagram",
    "href": "multimedia.html#diagram",
    "title": "6  Adding multimedia",
    "section": "6.3 Diagram",
    "text": "6.3 Diagram\nIt’s possible to create diagrams with markdown through the use of mermaid and other packages that are in-built in Quarto. See the Quarto documentation and the mermaid website for how to make this work.\nHere is a simple diagram\n\n\n\n\n\nflowchart LR\n  A(Point A) --&gt; B[Point B]\n\n\n\n\n\n\nthat was created as follows:\n```{mermaid}\nflowchart LR\n  A(Point A) --&gt; B[Point B]\n```",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Adding multimedia</span>"
    ]
  },
  {
    "objectID": "multimedia.html#audio",
    "href": "multimedia.html#audio",
    "title": "6  Adding multimedia",
    "section": "6.4 Audio",
    "text": "6.4 Audio\nTo be figured out. Audio players do not seem to be supported, this guy found some sort of workaround: https://forum.posit.co/t/embed-sound-player-in-quarto-book/164739/7",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Adding multimedia</span>"
    ]
  },
  {
    "objectID": "multimedia.html#maths-equation",
    "href": "multimedia.html#maths-equation",
    "title": "6  Adding multimedia",
    "section": "6.5 Maths equation",
    "text": "6.5 Maths equation\nFor equations, please refer to the Quarto markdown documentation.\ninline math: $E = mc^{2}$\ninline math: \\(E = mc^{2}\\)",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Adding multimedia</span>"
    ]
  },
  {
    "objectID": "multimedia.html#graphplot",
    "href": "multimedia.html#graphplot",
    "title": "6  Adding multimedia",
    "section": "6.6 Graph/plot",
    "text": "6.6 Graph/plot\nIn Quarto you can also generate graphs using a programming language. Quarto can work with R, Python, Julia, Bash, and more. A plot created with code will actually be inserted as an image in Quarto, but you can provide some image metadata (like the caption and the layout) in the code chunk itself.\nYou can see examples and explanation in the Quarto Figures documentation.",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Adding multimedia</span>"
    ]
  },
  {
    "objectID": "interactivity.html",
    "href": "interactivity.html",
    "title": "7  Interactivity",
    "section": "",
    "text": "7.1 Exercises\nInteractive exercises are not part of core Quarto functionality. Luckily, there are smart people who have developed software packages to still include these.",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Interactivity</span>"
    ]
  },
  {
    "objectID": "interactivity.html#exercises",
    "href": "interactivity.html#exercises",
    "title": "7  Interactivity",
    "section": "",
    "text": "WebexerciseslearnrH5PGrasple\n\n\nWebexercises is an R package. According to the webexercises documentation:\n\nwebexercises creates standalone HTML files that require only a JavaScript-enabled browser. It is also extremely simple to use.\n\nTo get started, take the following steps:\n\nInstall and load the package\n```{{r}}\n#| echo: false\ninstall.packages(\"webexercises\")\nlibrary(webexercises)\n```\nAdd the necessary files and setup to include webexercises in the Quarto project. You should only do this once so this does not need to be included in the .qmd files!\nadd_to_quarto()\nStart using the exercises!\n\nFill-in-the-blanks:\nFill in any vowel: `r fitb(c(\"A\", \"E\", \"I\", \"O\" , \"U\"), ignore_case = TRUE)` \nFill in any vowel: \nMultiple choice:\nWhich package helps you load data? \n`r mcq(c(\"tidyr\", \"dplyr\", answer = \"readr\", \"ggplot2\"))`\nWhich package helps you load data? tidyrdplyrreadrggplot2\nSee the webexercises documentation for other options:\n\nTrue or false questions\nLong multiple choice questions\nChecked sections with feedback that can be hidden and unhidden\nHidden solutions and hints\n\n\n\n\n\nlearnr is an R package that can turn markdown documents into interactive tutorials, including:\n\n\nNarrative, figures, illustrations, and equations.\nCode exercises (R code chunks that users can edit and execute directly).\nQuiz questions.\nVideos (supported services include YouTube and Vimeo).\nInteractive Shiny components.\n\nSource: learnr documentation\n\nlearnr in essence creates a Shiny application which must be hosted on a shiny server or run locally. The learnr documentation includes detailed instructions on how to create a tutorial.\n\n\n\n\n\n\nWarning\n\n\n\nCreating a tutorial with learnr requires you to host your tutorial on a shinyapp server. It is therefore not necessarily a core part of your Quarto book.\n\n\n\n\nIf H5P content is hosted on a public website, you can easily re-use it, by clicking “&lt;&gt; Embed” and copy-pasting the HTML code into your Quarto document!\nBelow is an example from the H5P.org website.\n&lt;iframe src=\"https://h5p.org/h5p/embed/6725\" \nwidth=\"1090\" height=\"389\" frameborder=\"0\" \nallowfullscreen=\"allowfullscreen\" \nallow=\"geolocation *; microphone *; camera *; midi *; encrypted-media *\"\ntitle=\"Arithmetic Quiz\"&gt;&lt;/iframe&gt;&lt;script src=\"https://h5p.org/sites/all/modules/h5p/library/js/h5p-resizer.js\" charset=\"UTF-8\"&gt;&lt;/script&gt;\n\n\n\n\n\nSimilar as with H5P, it is sometimes also possible to embed Grasple exercises within a Quarto book, but only if allowed by the organisation using it. You can read more in the Grasple documentation on embedding.",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Interactivity</span>"
    ]
  },
  {
    "objectID": "interactivity.html#commenting-on-book-content",
    "href": "interactivity.html#commenting-on-book-content",
    "title": "7  Interactivity",
    "section": "7.2 Commenting on book content",
    "text": "7.2 Commenting on book content\nIt’s possible to allow others to comment on your book content. The comments will then be visible publicly for everyone in the book itself:\n\nHypothes.isUtterancesGiscus\n\n\nThrough Hypothes.is, anyone can comment on content just like in Microsoft Office solutions, by selecting text and writing a comment about that text. People will need a Hypothes.is account in order to be able to comment, and all comments will be publicly visible.\nRequirements: simply add the following on a new line in your _quarto.yml file:\ncomments:\n    hypothesis: true\nOr for further custom options, please refer to the Quarto documentation on Hypothes.is.\n\n\nUtterances enables comments to be added to the bottom of a page. Comments on a page will automatically open as an Issue in the corresponding GitHub repository. People will need a GitHub account in order to be able to comment, and all comments will be publicly visible.\nRequirements:\n\nMake sure the GitHub repository is public (not private or internal).\nInstall the utterances app in the repository.\nMake sure the Issue feature is enabled in the repository.\nAdd and adjust the following at the top of the chapter (.qmd file) where you want people to be able to comment:\n---\nformat:\n    html:\n        comments:\n            utterances:\n                repo: yourusername/yourrepositoryname\n---\nUnderneath repo, you can additionally specify label, theme, and issue-term, see the Quarto documentation.\n\n\n\nGiscus enables comments to be added to the bottom of a page. Comments on a page will automatically open as a GitHub Discussion in the corresponding GitHub repository. People will need a GitHub account in order to be able to comment, and all comments will be publicly visible.\nRequirements:\n\nMake sure the GitHub repository is public (not private or internal).\nInstall the giscus app in the repository.\nMake sure the GitHub Discussions feature is enabled in the repository.\nAdd and adjust the following at the top of the chapter (.qmd file) where you want people to be able to comment:\n---\nformat:\n    html:\n        comments:\n            giscus:\n                repo: yourusername/yourrepositoryname\n---\nUnderneath repo, you can additionally specify category, mapping, theme, language, and more settings, see the Quarto documentation.",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Interactivity</span>"
    ]
  },
  {
    "objectID": "interactivity.html#html-elements",
    "href": "interactivity.html#html-elements",
    "title": "7  Interactivity",
    "section": "7.3 HTML elements",
    "text": "7.3 HTML elements\n\nTabsetsDropdownsButtonsCallout blocks\n\n\nTabsets are a nice way to present different options. They are used on this page as well. To create them, use the following:\n::: {.panel-tabset}\n#### Tab number 1\n\nSome content in tab number 1\n\n#### Tab number 2\n\nSome content in tab number 2\n\n:::\nYou can read more about tabsets in the Quarto documentation.\n\n\nDropdown elements are a nice way to hide a lot of optional text. An example:\n\n\nClick for more information\n\n\nHere is some more information\n\n\nDropdowns like this are created with the HTML details tag. For example, the above example was created as follows:\n&lt;details&gt;&lt;summary&gt;Click for more information&lt;/summary&gt;\n&lt;div&gt;Here is some more information&lt;/div&gt;\n&lt;/details&gt;\nEverything about this details tag can be styled. That is too much to go into here, but you can find more information about that on the Mozilla Developer website.\n\n\nButtons in Quarto are not actually Quarto-native. But because of Quarto’s flexibility it is easy to add one!\nA regular button: \n[Check out Quarto](https://quarto.org/){.btn .btn-outline-primary .btn role=\"button\"}\n\nA button with a tooltip: \n[Check out Quarto](https://quarto.org/){.btn .btn-outline-primary .btn role=\"button\" data-toggle=\"tooltip\" title=\"Here's a tooltip\"}\nA regular button: Check out Quarto\nA button with a tooltip: Check out Quarto (source)\n\n\nIf you want to make content stand out a bit more, Quarto has 5 default callout blocks: note, warning, important, tip and caution. They are formatted in different colors and you can make them appear simple, make them collapsible, and even referenceable throughout your book!\nExample\n:::{.callout-note collapse=\"true\" title=\"Title of the note\"}\nHere is a note\n:::\n\n\n\n\n\n\nTitle of the note\n\n\n\n\n\nHere is a note\n\n\n\nSee for more information Quarto’s callout documentation.",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Interactivity</span>"
    ]
  },
  {
    "objectID": "interactivity.html#glossary",
    "href": "interactivity.html#glossary",
    "title": "7  Interactivity",
    "section": "7.4 Glossary",
    "text": "7.4 Glossary\nIn-built support for creating glossaries is currently not available, but Lisa DeBruine has created a Quarto extension that uses the same logic as her previous glossary R package.\nTo use the glossary extension:\n\nFirst install the extension via the terminal:\nquarto install extension debruine/quarto-glossary\nStore definitions in a glossary file (YAML)\nTo the _quarto.yml, add glossary metadata that specifies where the YAML file is located and how term definitions should appear.\nUse the extension:\n\nUse terms in your text with the shortcode\n\n\n\n\n{{&lt; glossary your-term &gt;}}\n\n\n\n\n\n\nDisplay the whole glossary in a table\n\n\n\n\n{{&lt; glossary table = true &gt;}}\n\n\n\n\n\n\n\n\nFor more extensive information, please refer to the full extension documentation.",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Interactivity</span>"
    ]
  },
  {
    "objectID": "interactivity.html#more-advanced-interactivity",
    "href": "interactivity.html#more-advanced-interactivity",
    "title": "7  Interactivity",
    "section": "7.5 More advanced interactivity",
    "text": "7.5 More advanced interactivity\nIt is possible to add interactivity in other ways too:\n\n\nCreate custom JavaScript visualizations using Observable JS\nUse the Shiny R package to add interactivity to Knitr engine documents.\nIncorporate Jupyter Widgets or htmlwidgets (for the Jupyter and Knitr engines, respectively) into your document.\n\n\nPlease refer to the extensive Quarto documentation for information on how to implement these into your Quarto book or website.",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Interactivity</span>"
    ]
  },
  {
    "objectID": "styling.html",
    "href": "styling.html",
    "title": "8  Styling",
    "section": "",
    "text": "Quarto has many styling options already in-built. Take a look at the HTML themes page and try out some existing themes!\nIt’s also possible to add your own styling, instead of, or additional to a Quarto theme. This can be done by adding a scss or css file to the repository and letting Quarto know to use it in the _quarto.yml:\nformat:\n  html:\n    css: styles.css\nHere is a tutorial that introduces CSS.\nBesides CSS or SCSS style sheets there is a lot that can also be customized in the _quarto.yml. Here you can find a lot of options for Quarto books and here for Quarto websites (which also largely work for Quarto HTML books).\nThis website with Quarto tricks is also very helpful in customizing Quarto content.",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Styling</span>"
    ]
  },
  {
    "objectID": "citation.html",
    "href": "citation.html",
    "title": "9  Citations",
    "section": "",
    "text": "9.1 Reference keys\nAdding reproducible references happens with BibTex keys. A typical BibTex key might look as follows:\nBibTex keys can be stored in a .bib file, for example a file named references.bib. Such a file can be stored in the folder of your Quarto book, and the references from that file can be used as citations or in a bibliography.",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Citations</span>"
    ]
  },
  {
    "objectID": "citation.html#reference-keys",
    "href": "citation.html#reference-keys",
    "title": "9  Citations",
    "section": "",
    "text": "@misc{RMarkdownWritingReproducible,\n    title = {{RMarkdown} for writing reproducible scientific papers},\n    url = {https://libscie.github.io/rmarkdown-workshop/handout.html},\n    urldate = {2023-04-18},\n    file = {RMarkdown for writing reproducible scientific papers:C\\:\\\\Users\\\\Moope001\\\\Zotero\\\\storage\\\\SJITSZZI\\\\handout.html:text/html},\n}",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Citations</span>"
    ]
  },
  {
    "objectID": "citation.html#workflow-with-zotero",
    "href": "citation.html#workflow-with-zotero",
    "title": "9  Citations",
    "section": "9.2 Workflow with Zotero",
    "text": "9.2 Workflow with Zotero\nHere we discuss a workflow with the reference manager Zotero. Other reference managers can also produce .bib files. We’ve chosen Zotero, because 1) it is open source and 2) it allows automatic updating of the .bib file as you find more references during the writing of your book.\n\n9.2.1 Installation\n\nInstall Zotero.\n\nIf you work on a Utrecht University-managed laptop, you can install Zotero from the Software Center.\nIf you work on a private device, follow the installation instructions on the Zotero installation page.\n\nInstall the Zotero connector for your browser. This connector makes sure you can directly save a reference to Zotero from your browser.\nInstall the Better BibTex extension for Zotero. This makes sure your references are saved in a format that Quarto can work with.\n\n\n\n9.2.2 Set-up\n\nOpen Zotero Desktop\n\nLog into your account\nCreate a new collection for your project, for example: name-of-your-quarto-book\n\nOpen your web browser\n\nDouble-check that you can find the Zotero Connector in your browser\nSearch for a resource (article, web page, book, etc.) that you want to cite in your Quarto book\nUse the Zotero Connector to save the reference to your collection\nCheck that the resource has indeed appeared in your name-of-your-quarto-book collection in Zotero\nIf needed, adjust or complement the Zotero metadata if something is wrong or missing\n\nIn Zotero Desktop\n\nRight-click your collection and select Export Collection\nFor the Format, select Better BibTex\nClick the option to Keep updated\nProvide the file name as references.bib and save it in the same folder as your Quarto book\n\nIn RStudio\n\nMake sure that the _quarto.yml file contains the correct path to the references.bib file, for example:\nbibliography: references.bib\n\n\n\n\n9.2.3 Workflow\nNow that you’ve set up a connection between Zotero and your local Quarto book, you can start adding references to your Zotero collection and citing them in your book. Every time you save a reference to your Zotero library, Zotero automatically updates your .bib file through syncing with Zotero desktop and updating the .bib file.\nTo insert a citation:\n\nOpen the .bib file.\nLook for the citation reference, it is listed after the @ sign.\nCite the reference:\n\nIn-text citations: @knuth84\nBracketed citations: [@knuth84]\n\n\nTo insert a bibliography, add the following to the page where you want the bibliography to show up:\n::: {#refs}\n:::\nFor more information about citations, please check out the Quarto documentation.",
    "crumbs": [
      "Customization",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Citations</span>"
    ]
  },
  {
    "objectID": "rendering.html",
    "href": "rendering.html",
    "title": "10  Rendering",
    "section": "",
    "text": "10.1 How to render",
    "crumbs": [
      "Publishing",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Rendering</span>"
    ]
  },
  {
    "objectID": "rendering.html#how-to-render",
    "href": "rendering.html#how-to-render",
    "title": "10  Rendering",
    "section": "",
    "text": "You specify to which format you want to convert the files in the _quarto.yml file. An example:\nformat:\n  html:\n    theme: cosmo\n    css: custom-styling.css\nIf you use RStudio, you can simply click the Render button at the top of the page: \nIf you use the terminal, you type:\n\n# render project in current directory\nquarto render\n\n# or: render project in the directory 'mybook'\nquarto render mybook\nBy default, quarto will build the files (html, pdf, docx, etc.) in a folder called _book. If you updated the _quarto.yml file, that folder will be named docs instead.",
    "crumbs": [
      "Publishing",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Rendering</span>"
    ]
  },
  {
    "objectID": "rendering.html#previewing",
    "href": "rendering.html#previewing",
    "title": "10  Rendering",
    "section": "10.2 Previewing",
    "text": "10.2 Previewing\nYou can also preview your book while writing it. In RStudio, you can tick “Render on save” and then the preview will update whenever you save a new change in the document. \nAlternatively, you can type in the terminal:\n# preview project in current directory\nquarto preview\n\n# preview project in the directory 'mybook'\nquarto preview mybook",
    "crumbs": [
      "Publishing",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Rendering</span>"
    ]
  },
  {
    "objectID": "rendering.html#automated-rendering-on-github",
    "href": "rendering.html#automated-rendering-on-github",
    "title": "10  Rendering",
    "section": "10.3 Automated rendering on GitHub",
    "text": "10.3 Automated rendering on GitHub\nIt is also possible to have GitHub Actions render the files to the correct format and publish HTML files to a GitHub Pages website.\nJust for your overview, here are the 2 ways to publish with GitHub Pages that we discussed here:\n\nRender the book to a docs folder and set the GitHub repository so that it uses the docs folder as the basis for the GitHub pages website.\nAdd a publish.yml file to the GitHub repository (in the folder .github/workflows/) and set the GitHub repository so that it uses the GitHub Action to publish the GitHub pages website.\n\nThe Quarto website explains how to make automatic rendering and publishing possible. You may need to play a bit with the paths and branches that the Action uses to render and publish. Here is an example of a publish.yml from one of our own workshops.",
    "crumbs": [
      "Publishing",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Rendering</span>"
    ]
  },
  {
    "objectID": "archiving.html",
    "href": "archiving.html",
    "title": "11  Archiving",
    "section": "",
    "text": "11.1 Why archive the book?\nIn short, to make your book FAIR!",
    "crumbs": [
      "Publishing",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Archiving</span>"
    ]
  },
  {
    "objectID": "archiving.html#why-archive-the-book",
    "href": "archiving.html#why-archive-the-book",
    "title": "11  Archiving",
    "section": "",
    "text": "GitHub may be incredibly widely used, it’s still owned by a commercial company (Microsoft) which can change policies or go bankrupt. It is wise to not be fully dependent on Microsoft to keep your book available for the long-term.\nGitHub was originally meant as a collaboration space, and not to keep all content in the air at all times.\nGitHub cannot give your book a persistent identifier, but Zenodo can! That way, your book will always be available at that one persistent link.\nAdditionally, by archiving your book in Zenodo, you are publishing structured metadata, which makes your book a lot more findable for humans and machines.",
    "crumbs": [
      "Publishing",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Archiving</span>"
    ]
  },
  {
    "objectID": "archiving.html#how-to-obtain-a-doi-by-archiving-in-zenodo",
    "href": "archiving.html#how-to-obtain-a-doi-by-archiving-in-zenodo",
    "title": "11  Archiving",
    "section": "11.2 How to obtain a DOI by archiving in Zenodo",
    "text": "11.2 How to obtain a DOI by archiving in Zenodo\nHere is a short checklist. The checklist is more elaborate on the website of the Code Refinery.\n\nIf you don’t have it already, create an ORCID.\nIf you don’t have it already, create a Zenodo account with ORCID.\nLog into Zenodo (or Zenodo Sandbox).\nLink your Zenodo account your GitHub account.\nIn Zenodo, go to Settings &gt; GitHub, and “Flip the switch” of your to-be-archived repository so that it is available for archiving.\nIn GitHub, create a Release of your repository.\nAfter some thinking, you get a DOI!\nIf needed, you can edit the Zenodo metadata to make it more complete and/or accurate.\nInclude the DOI in your GitHub repository ánd in your published textbook (so in one of the .qmd files).",
    "crumbs": [
      "Publishing",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Archiving</span>"
    ]
  },
  {
    "objectID": "archiving.html#educational-resource-edusources",
    "href": "archiving.html#educational-resource-edusources",
    "title": "11  Archiving",
    "section": "11.3 Educational resource: Edusources",
    "text": "11.3 Educational resource: Edusources\nIf your book is an educational resource, we recommend registering it as an Open Educational Resource in Edusources. This way, the book is even more findable by others and you contribute to the Open Education movement!\nHow? Edusources uses SURF Sharekit in the background. Find SURF Sharekit manuals here. Importantly, since you have already published your book, you don’t need to upload files to SURF Sharekit. Instead, you can provide a link (the DOI) to the materials!",
    "crumbs": [
      "Publishing",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Archiving</span>"
    ]
  }
]